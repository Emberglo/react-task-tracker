import Header from './components/Header'
import Tasks from './components/Tasks'
import AddTask from './components/AddTask'
import Footer from './components/Footer'
import About from './components/About'
import TaskDetails from './components/TaskDetails'
import { useState, useEffect } from "react"
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'

function App() {
  // NOTE - having tasks state at this level means it can be accessed by all children components
  const [tasks, setTasks] = useState([]);

  const [showAddTask, setShowAddTask] = useState(false);

  useEffect(() => {
    // NOTE - function to get tasks so that the fetch function is reuseable
    const getTasks = async () => {
      const tasksFromServer = await fetchTasks();

      setTasks(tasksFromServer)
    }

    getTasks();
  }, [])

  // SECTION - Fetch tasks from mock server

  const fetchTasks = async () => {
    const res = await fetch('http://localhost:5000/tasks');
    const data = await res.json();
  
    return data;
  }

  // SECTION - Fetch single task from mock server

  const fetchTask = async (id) => {
    const res = await fetch(`http://localhost:5000/tasks/${id}`);
    const data = await res.json();
  
    return data;
  }

  // SECTION - Add Task

  const addTask = async (task) => {
    // NOTE - function to send a new task to the server
    const res = await fetch('http://localhost:5000/tasks', {
      method: 'POST',
      headers: {
        'Content-type': 'application/json'
      },
      body: JSON.stringify(task)
    });

    // NOTE - gets back the newly added task
    const data = await res.json();

    // NOTE - update local state by adding new task to the current tasks array
    setTasks([...tasks, data]);

    // NOTE - OLD CODE FROM BEFORE ADDING MOCK SERVER - gets a random number for the ID since we don't have a backend to provide one and adds task to state
    // const id = Math.floor(Math.random() * 10000) + 1;
    
    // const newTask = {id, ...task};

    // setTasks([...tasks, newTask]);
  }

  // SECTION - Delete Task

  const deleteTask = async (id) => {
    // NOTE - function to delete date from server
    await fetch(`http://localhost:5000/tasks/${id}`, {
      method: 'DELETE'
    });

    // NOTE - uses setTasks to update the state above with the new array generated by the filter
    setTasks(tasks.filter((task) => task.id !== id));
  }

  //SECTION - Toggle Reminder

  const toggleReminder = async (id) => {
    // NOTE - we can break out the update logic to a separate function if we want to add edit features for other data on the tasks
    const taskToToggle = await fetchTask(id);

    const updatedTask = {...taskToToggle, reminder: !taskToToggle.reminder};

    const res = await fetch(`http://localhost:5000/tasks/${id}`, {
      method: 'PUT',
      headers: {
        'Content-type': 'application/json'
      },
      body: JSON.stringify(updatedTask)
    });

    const data = await res.json();

    // NOTE - find the task that matches and spread the task then update the reminder to the opposite of whatever the current value is
    setTasks(tasks.map((task) => task.id === id ? {...task, reminder: data.reminder} : task))
  }
  
  return (
    <Router>
      <div className="container">
        <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />

        <Routes>

          <Route 
            path='/'
            element={
              <>
                {/* NOTE - the && operator here is a shortcut for doing a ternary when you don't need an alternative */}
                {showAddTask && <AddTask onAdd={addTask} />}

                {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} toggleReminder={toggleReminder} /> : 'No Tasks To Show'}
              </>
            }
          />

          <Route path='/about' element={<About />} />

          <Route path='/task/:id' element={<TaskDetails />} />

        </Routes>    

        <Footer />
      </div>
    </Router>
  );
}

export default App;
